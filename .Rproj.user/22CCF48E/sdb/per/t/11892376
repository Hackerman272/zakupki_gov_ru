{
    "collab_server" : "",
    "contents" : "#\n# ВНИМАНИЕ!!!!!!\n# ПРИ БОЛЬЩОМ КОЛИЧЕСТВЕ ОБРАЩЕНИЙ НА САЙТЕ ГОСЗАКУПОК МОГУТ ЗАБАНИТЬ ПО IP\n#\n# В этом скрипте содержится код разбора выдачи сайта госзакупок zakupki.gov.ru\n# Начало работы: 29.08.2017\n# Автор: Светлана Аксюк (s.a.aksuk@gmail.com)\n#\n# Данные загружаются по запросу через URL.\n# Пример URL для разбора:\n# http://zakupki.gov.ru/epz/contract/quicksearch/search.html?searchString=&morphology=on&pageNumber=1&sortDirection=false&recordsPerPage=_50&sortBy=PO_DATE_OBNOVLENIJA&priceFrom=0&priceTo=1000000&budgetLevels=&budgetName=&nonBudgetCodesList=&placingWayForContractList_4=on&placingWayForContractList=4&contractStageList_1=on&contractStageList_2=on&contractStageList=1%2C2&regions=&contractDateFrom=&contractDateTo=&contractInputNameDefenseOrderNumber=&contractInputNameContractNumber=&publishDateFrom=01.01.2016&publishDateTo=29.08.2017&updateDateFrom=&updateDateTo=\n#\n# Результаты -- характеристики госзакупок из базы данных -- записыввются\n#  в .csv файл.\n# Ограничение API: 500 записей при выгрузке вручную с сайта.\n# Мы запрашиваем все записи с максимальным количеством на странице: 50,\n#  потом листаем в цикле. Внимание: заказы быстро добавляются, в конце\n#  стоит проверить таблицу на наличие дубликатов. Уникальный идентификатор --\n#  номер заказа (ContractID).\n#\n\n\n# ПАКЕТЫ -----------------------------------------------------------------------\n#\nlibrary('RCurl')\nlibrary('XML')\nlibrary('RSelenium')\nlibrary('wdman')\n\n\n# КОНСТАНТЫ --------------------------------------------------------------------\n#\n## постоянная часть запроса данных (URL)\nconst.html <- c('http://zakupki.gov.ru/epz/contract/quicksearch/search.html?searchString',\n                'morphology',\n                'pageNumber',\n                'sortDirection',\n                'recordsPerPage',\n                'sortBy',\n                'fz44',\n                'priceFrom',\n                'priceTo',\n                'budgetLevels',\n                'budgetName',\n                'nonBudgetCodesList',\n                'placingWayForContractList_4',\n                'placingWayForContractList',\n                'contractStageList_1',\n                'contractStageList_2',\n                'contractStageList',\n                'regions',\n                'contractDateFrom',\n                'contractDateTo',\n                'contractInputNameDefenseOrderNumber',\n                'contractInputNameContractNumber',\n                'publishDateFrom',\n                'publishDateTo',\n                'updateDateFrom',\n                'updateDateTo')\n\n## имя браузера для маскировки запроса по getURL()\nuserAgent <- 'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko'\n\n## имя файла для экспорта\nexportCsvFileName <- paste0('zakupki_gov_ru_', Sys.time(), '.csv')\n\n\n# ФУНКЦИИ ----------------------------------------------------------------------\n#\n#\n# Применить xpath запрос и почистить возвращаемый результат\n#  от хвостовых пробелов и спецсимволов\n#\nxpathApplyAndClean <- function(root.node, xpath.text, return.mode = 'value',\n                               attr.name = NULL) {\n    # сами теги\n    if (return.mode == 'value') {\n        result <- xpathSApply(root.node, xpath.text, xmlValue)\n    }\n    if (return.mode == 'attr') {\n        result <- xpathSApply(root.node, xpath.text, xmlGetAttr, attr.name)\n    }\n    # убираем перевод каретки\n    result <- gsub(result, pattern = '\\r\\n', replacement = '')\n    # убираем пробелы по краям\n    result <- gsub(result, pattern = \"^\\\\s+|\\\\s+$\", replacement = '')\n    # возвращаем значения\n    return(result)\n}\n#\n#\n# Вместо try-catch для результатов xpath запроса:\n#  если результат возвращается нулевой, меняем его на NA\ntryXpath <- function(xpath.result) {\n    if (length(xpath.result) == 0) {\n        xpath.result <- NA\n    }\n    return(xpath.result)\n}\n\n\n# ПЕРЕМЕННЫЕ -------------------------------------------------------------------\n#\n## переменная часть запроса данных (URL)\nvar.html <- c('',                                       # searchString\n              'on',                                     # morphology\n              '1',                                      # pageNumber\n              'false',                                  # sortDirection\n              '_50',                                    # recordsPerPage\n              'PO_DATE_OBNOVLENIJA',                    # sortBy\n              'on',                                     # fz44\n              '0',                                      # priceFrom\n              '1000000',                                # priceTo\n              '',                                       # budgetLevels\n              '',                                       # budgetName\n              '',                                       # nonBudgetCodesList\n              'on',                                     # placingWayForContractList_4\n              '4',                                      # placingWayForContractList\n              'on',                                     # contractStageList_1\n              'on',                                     # contractStageList_2\n              '1%2C2',                                  # contractStageList\n              '',                                       # regions\n              '',                                       # contractDateFrom\n              '',                                       # contractDateTo\n              '',                                       # contractInputNameDefenseOrderNumber\n              '',                                       # contractInputNameContractNumber\n              '01.06.2017',                             # publishDateFrom\n              '31.08.2017',                             # publishDateTo\n              '',                                       # updateDateFrom\n              ''                                        # updateDateTo\n              )\n\nfileURL <- paste0(paste0(const.html, '=', var.html), collapse = '&')\n\n\n# ЗАГРУЗКА ---------------------------------------------------------------------\n#\n## загружаем текст html-страницы\nhtml <- getURL(fileURL, .encoding = 'UTF-8',\n               ssl.verifypeer = FALSE,\n               .opts = list(useragent = userAgent,\n                            followlocation = TRUE))\n## разбираем как html\ndoc <- htmlTreeParse(html, useInternalNodes = T)\n## корневой элемент\nrootNode <- xmlRoot(doc)\n\n\n# ПАРСИНГ ----------------------------------------------------------------------\n#\n# РЕЕСТР КОНТРАКТОВ ============================================================\n#\n## настроечные переменные\n#...............................................................................\n\n### сколько страниц в выдаче\nn.pages <- as.numeric(xpathApplyAndClean(rootNode,\n                                         \"//div[@class = 'paginator greyBox']/ul/li\"))\nn.pages <- n.pages[!is.na(n.pages)]\nn.pages <- max(n.pages)\n\n# количество записей на одной странице\nn.at.one.page <- as.numeric(substr(var.html[5], 2,\n                                   nchar(var.html[5])))\n\n\n### цикл по номерам страниц выдачи\nfor (k in 1:1) {\n    # порядковый номер первой записи в таблице на странице\n    num.start <- k\n\n    # порядковый номер последней записи в таблице на странице\n    num.end <- k + n.at.one.page - 1\n\n    ## парсим страницу с выдачей во фрейм df.part\n    #...............................................................................\n    ### 1 столбец -- порядковый номер записи в общей таблице\n    df.part <- data.frame(Num = seq(num.start, num.end, 1))\n\n    ### 2 столбец -- статус заказа\n    xpath.string <- \"//dd[@class='status-field']\"\n    df.part$Status <- xpathApplyAndClean(rootNode, xpath.string)\n\n    ### 3 столбец -- итоговая сумма заказа (предложение победителя)\n    xpath.string <- \"//td[@class = 'tenderTd']/dl/dd/strong\"\n    xpath.result <- xpathApplyAndClean(rootNode, xpath.string)\n    xpath.result <- gsub(xpath.result, pattern = '^\\\\s+|\\\\s+$', \n                         replacement = '')\n    df.part$FinalStoim <- xpath.result\n\n    ### 4 столбец -- номер контракта\n    xpath.string <- \"//td[@class='descriptTenderTd']/dl/dt\"\n    xpath.result <- xpathApplyAndClean(rootNode, xpath.string)\n    xpath.result <- gsub(xpath.result, pattern = '№ ', '')\n    df.part$ContractID <- xpath.result\n\n    ### 5 столбец -- ссылка на контракт\n    xpath.string <- \"//td[@class='descriptTenderTd']/dl/dt/a\"\n    xpath.result <- xpathApplyAndClean(rootNode, xpath.string, 'attr', 'href')\n    xpath.result <- paste0('http://zakupki.gov.ru', xpath.result)\n    df.part$ContractHyperlink <- xpath.result\n\n    ### 6 столбец -- ссылка на заказчика\n    xpath.string <- \"//td[@class='descriptTenderTd']/dl/dd[@class='nameOrganization']/a\"\n    xpath.result <- xpathApplyAndClean(rootNode, xpath.string, 'attr', 'href')\n    xpath.result <- paste0('http://zakupki.gov.ru', xpath.result)\n    df.part$customerHyperlink <- xpath.result\n        \n    ### 7 столбец -- наименование заказчика\n    xpath.string <- \"//td[@class='descriptTenderTd']/dl/dd[@class='nameOrganization']\"\n    df.part$NameCustomer <- xpathApplyAndClean(rootNode, xpath.string)\n\n    ### 8 столбец (заготовка) -- ОКТМО заказчика\n    df.part$CustomerOKTMO <- rep('', n.at.one.page)\n\n    ### с датами обновления и размещения приходится потанцевать\n    xpath.string <- \"//label[@class='width80']/parent::li\"\n    xpath.result <- xpathApplyAndClean(rootNode, xpath.string)\n    tmp <- xpath.result\n    xpath.result <- c(gsub(gsub(tmp[grepl(tmp, pattern = 'Размещено:')],\n                                pattern = 'Размещено:', replacement = ''),\n                           pattern = '^\\\\s+|\\\\s+$', replacement = ''),\n                      gsub(gsub(tmp[grepl(tmp, pattern = 'Обновлено:')],\n                                pattern = 'Обновлено:', replacement = ''),\n                           pattern = '^\\\\s+|\\\\s+$', replacement = ''))\n\n    ### 9 столбец -- дата размещения заказа\n    df.part$PostedDate <- xpath.result[1]\n\n    ### 10 столбец -- дата обновления заказа\n    df.part$UpdatedDate <- xpath.result[2]\n\n    ## находим переходим по ссылке к описанию электронного аукциона\n    xpath.string <- \"//dd[@class = 'additionalDescriptionList']/ul/li/span/a\"\n    xpath.result <- xpathApplyAndClean(rootNode, xpath.string, 'attr', 'href')\n    xpath.result <- paste0('http://zakupki.gov.ru', xpath.result)\n    details.URLs <- xpath.result\n\n    ### 11 столбец (заготовка) -- наименование электронной площадки\n    df.part$PlatformName <- rep('', n.at.one.page)\n\n    ### 12 столбец (заготовка) -- объект закупки: наименование\n    df.part$ObjectName <- rep('', n.at.one.page)\n\n    ### 13 столбец (заготовка) -- объект закупки: код по ОКПД2\n    df.part$ObjectCode <- rep('', n.at.one.page)\n\n    ### 14 столбец (заготовка) -- объект закупки: единица измерения\n    df.part$ObjectUnits <- rep('', n.at.one.page)\n\n    ### 15 столбец (заготовка) -- объект закупки: количество единиц\n    df.part$ObjectAmount <- rep('', n.at.one.page)\n\n    ### 16 столбец (заготовка) -- объект закупки: цена за единицу\n    df.part$ObjectUnitPrice <- rep('', n.at.one.page)\n\n    ### 17 столбец (заготовка) -- начальная (максимальная) цена контракта\n    df.part$ObjectNMZ <- rep('', n.at.one.page)\n\n    ### 18 столбец (заготовка) -- есть ли ограничения допуска\n    df.part$IsRestrictions <- rep(F, n.at.one.page)\n\n    ### 19 столбец (заготовка) -- минимальное ценовое предложение\n    df.part$MinPriceOffer <- rep('', n.at.one.page)\n\n    ### 20 столбец (заготовка) -- максимальное ценовое предложение\n    df.part$MinPriceOffer <- rep('', n.at.one.page)\n\n    ### 21 столбец (заготовка) -- количество участников\n    df.part$ParticipantsNumber <- rep('', n.at.one.page)\n\n\n    # ссылки на страницы с общей информацией\n    destFileURL <- details.URLs\n    destFileURL <- gsub(destFileURL, pattern = '/notice/view/',\n                        replacement = '/notice/ea44/view/')\n\n    # сведения о поставщиках: гиперссылки\n    destFileURL2 <- paste0('http://zakupki.gov.ru/epz/order/notice/ea44/view/supplier-results.html?regNumber=',\n                           gsub('.*=', '', destFileURL))\n\n    ## парсим детали\n    for (i in 1:length(details.URLs)) {\n\n        print(paste0('i = ', i))\n        print(destFileURL[i])\n\n        destHtml <- getURL(destFileURL[i], .encoding = 'UTF-8',\n                           ssl.verifypeer = FALSE,\n                           .opts = list(useragent = userAgent,\n                                        followlocation = TRUE))\n\n        ## разбираем как html\n        descDoc <- htmlTreeParse(destHtml, useInternalNodes = T)\n        ## корневой элемент\n        descRootNode <- xmlRoot(descDoc)\n\n        # всё содержимое табличек, потому что я не могу нормально\n        #  запарсить по условию\n        xpath.string <- \"//div[@class = 'noticeTabBoxWrapper']/table//td\"\n        raw.notice <- xpathApplyAndClean(descRootNode, xpath.string)\n\n        ### 11 столбец -- наименование электронной площадки\n        search.tag <- 'Наименование электронной площадки'\n        df.part$PlatformName[i] <- raw.notice[which(grepl(raw.notice,\n                                                          pattern = search.tag)) + 1]\n\n        ### 12 столбец -- объект закупки: наименование\n        search.tag <- 'Наименование товара, работы, услуги'\n        df.part$ObjectName[i] <- raw.notice[which(grepl(raw.notice,\n                                                        pattern = search.tag)) + 8][1]\n\n        ### 13 столбец -- объект закупки: код по ОКПД2\n        search.tag <- 'Наименование товара, работы, услуги'\n        df.part$ObjectCode <- raw.notice[which(grepl(raw.notice,\n                                                     pattern = search.tag)) + 9][1]\n\n        ### 14 столбец -- объект закупки: единица измерения\n        search.tag <- 'Наименование товара, работы, услуги'\n        df.part$ObjectUnits[i] <- raw.notice[which(grepl(raw.notice,\n                                                         pattern = search.tag)) + 10][1]\n\n        ### 15 столбец -- объект закупки: количество единиц\n        search.tag <- 'Наименование товара, работы, услуги'\n        df.part$ObjectAmount[i] <- raw.notice[which(grepl(raw.notice,\n                                                          pattern = search.tag)) + 11][1]\n\n        ### 16 столбец -- объект закупки: цена за единицу\n        search.tag <- 'Наименование товара, работы, услуги'\n        df.part$ObjectUnitPrice[i] <- raw.notice[which(grepl(raw.notice,\n                                                             pattern = search.tag)) + 12][1]\n\n        ### 17 столбец -- начальная (максимальная) цена контракта\n        search.tag <- 'цена контракта'\n        df.part$ObjectNMZ[i] <- raw.notice[which(grepl(raw.notice,\n                                                       pattern = search.tag)) + 1]\n\n        ### 18 столбец -- есть ли ограничения допуска\n        search.tag <- 'Условия, запреты и ограничения допуска'\n        txt.restr <- raw.notice[which(grepl(raw.notice,\n                                            pattern = search.tag))]\n        if (length(txt.restr) != 0) {\n            df.part$IsRestrictions[i] <- T\n        }\n\n        # загружаем текст html-страницы с координатами заказчика\n        destFileURL3 <- df.part$customerHyperlink[i]\n        print(paste0('заказчик: ', destFileURL3))\n        destHtml <- getURL(destFileURL3, .encoding = 'UTF-8',\n                           ssl.verifypeer = FALSE,\n                           .opts = list(useragent = userAgent,\n                                        followlocation = TRUE))\n        ## разбираем как html\n        descDoc <- htmlTreeParse(destHtml, useInternalNodes = T)\n        ## корневой элемент\n        descRootNode <- xmlRoot(descDoc)\n\n        ### 8 столбец -- ОКТМО заказчика\n        txt.oktmo <- xpathApplyAndClean(descRootNode,\n                                        \"//*[@id = 'tab-info']//td\")\n        df.part$CustomerOKTMO <- tryXpath(txt.oktmo[which(txt.oktmo == 'ОКТМО') + 1])\n\n\n        # загружаем текст html-страницы с результатами определения поставщика\n        print(paste0('Аукцион: ', destFileURL2[i]))\n        destHtml <- getURL(destFileURL2[i], .encoding = 'UTF-8',\n                           ssl.verifypeer = FALSE,\n                           .opts = list(useragent = userAgent,\n                                        followlocation = TRUE))\n\n        ## разбираем как html\n        descDoc <- htmlTreeParse(destHtml, useInternalNodes = T)\n        ## корневой элемент\n        descRootNode <- xmlRoot(descDoc)\n\n        raw.partisipants <- xpathApplyAndClean(descRootNode, \"//td\")\n        search.tag <- c('Протокол определения поставщика', 'Информация о контракте')\n        raw.partisipants <- raw.partisipants[(which(grepl(raw.partisipants,\n                                                          pattern = search.tag[1])) + 6):(which(grepl(raw.partisipants, \n                                                                                                      pattern = search.tag[2])) - 1)]\n        prices <- raw.partisipants[seq(4,\n                                       floor(length(raw.partisipants) / 4) * 4,\n                                       by = 4)]\n        prices <- gsub(pattern = 'Российский рубль', replacement = '', prices)\n        prices <- gsub(pattern = '[[:space:]]', replacement = '', prices)\n        prices <- as.numeric(gsub(',', '.', prices))\n\n        ### 19 столбец -- минимальное ценовое предложение\n        df.part$MinPriceOffer <- min(prices)\n\n        ### 20 столбец -- максимальное ценовое предложение\n        df.part$MinPriceOffer <- max(prices)\n\n        ### 21 столбец -- количество участников\n        df.part$ParticipantsNumber <- length(xpathApplyAndClean(descRootNode,\n                                                                \"//div[@class = 'noticeTabBoxWrapper']//tbody/tr\"))\n    }\n\n\n    # ЗАПИСЬ РЕЗУЛЬТАТОВ -----------------------------------------------------------\n    filePath <- gsub(paste0('./', exportCsvFileName),\n                     pattern = ':',\n                     replacement = '-')\n    filePath <- gsub(filePath,\n                     pattern = '\\\\s',\n                     replacement = '_')\n    if (!file.exists(filePath)) {\n        file.create(filePath)\n        write.table(df.part, filePath, row.names = F, append = T, dec = ',',\n                    sep = ';')\n    } else {\n        write.table(df.part, filePath, row.names = F, append = T, dec = ',',\n                    sep = ';', col.names = F)\n    }\n}\n\n\n",
    "created" : 1504861942371.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "459383235",
    "id" : "11892376",
    "lastKnownWriteTime" : 1504860403,
    "last_content_update" : 1504861963663,
    "path" : "~/GitHub/zakupki_gov_ru/parser_html.R",
    "project_path" : "parser_html.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}